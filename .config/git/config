[user]
    name = dhilipsiva
    email = dhilipsiva@pm.me

[branch]
    autosetuprebase = always

[github]
    user = dhilipsiva

# [diff]
#     tool = vimdiff

# [diff]
#     tool = delta

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none


[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' -n 40 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    a = add

    f = fetch

    # Show the diff between the latest commit and the current state
    d = diff

    # Pull in remote changes for the current repository and all its submodules
    pl = pull --rebase

    p = push

    sy = !git pull && git push

    # push tags
    pt = push --tags


    # Clone a repository including all submodules
    cl = clone --recursive

    # Commit staged changes
    c = commit

    # Commit all changes
    ca = !git add -A && git commit -av

    t = tag -s

    # Switch to a branch, creating it if necessary
    co = checkout

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    b = branch

    # `git it` both initializes your repository and creates an empty root commit in one quick step
    it = "!git init && git commit -m “Initial Commit” --allow-empty"

    # Stash
    st = stash
    stsh = stash --keep-index
    staash = stash --include-untracked
    staaash = stash --all

    # please - push wish lease
    please = push --force-with-lease

    # git-open
    o = open

    # View merge requests
    mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.files/.config/git/excludesfile
    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space
    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = vimdiff

[push]
    default = matching

[rebase]
    autosquash = true
[credential]
	helper = store
[http]
	sslVerify = true
[init]
	defaultBranch = main
